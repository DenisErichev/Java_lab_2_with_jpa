package org.example;

import org.springframework.context.support.ClassPathXmlApplicationContext;
//Необходимо разработать приложение на языке Java с использованием на основе приложения, разработанного в рамках Лабораторной работы № 1.
//        Для хранения данных необходимо использовать СУБД PostgreSQL. Доступ к данным осуществляется с помощью Spring JPA. В приложении должны
//        храниться атрибуты сотрудника, атрибуты отдела, данные о начальнике отдела, данные о филиалах.
//
//        Атрибуты сотрудника  (Staff):
//        	ФИО
//        	Адрес проживания
//        	Принадлежность к отделам
//        	Дата рождения
//        	Должность
//        Атрибуты отдела (Department):
//        	Название
//        	Количество сотрудников
//        	Список комнат, в которых размещается
//        	Ссылка на начальника отдела (из табл. Staff)
//        Атрибуты филиала (Organisation):
//        	Название
//        	Адрес
//        	Ссылка на начальника филиала (из табл. Staff)
//
//        Интерфейс приложения – командная строка.
//
//        Приложение должно поддерживать:
//        	Добавление, удаление и поиск записи об отделе
//        	Добавление, удаление и поиск записи о сотруднике
//        	Добавление, удаление и поиск записей о филиале
//
//        Приложение должно содержать следующие слои и компоненты
//        Слои.
//        1.	Слой представления (вывод/ввод результатов на консоль пользователю)
//        2.	Слой Application Services. Здесь должны быть реализованы функции выполнения.
//        3.	Слой домена. Здесь находится определение сущности и репозитория.
//        Каждый слой должен быть упакован в своем пакете.
//
//        При этом должны быть задействованы следующие компоненты:
//        1. ApplicationService - компонент в котором выполняются функция выполнения. Находится в слое Application Services. В этой компоненте запрещается использовать вывод или ввод в консоль, любые взаимодействия осуществлять через входные/выходные параметры. Все взаимодействия с ORM должны быть осуществлены через соответствующие методы репозитория!
//        2. Repository -  компонент, инкапсулирующий работу с ORM в виде CRUD  операций (CREATE, REFRESH, UPDATE,DELETE)
//
//        Dependency Injection должен склеивать Все компоненты воедино.
//        При разработке компонент необходимо выставить scope равным Singleton для сервисов и @Repositlry для репозитория..


public class Main {
    public static void main(String[] args) {
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        MainLayer mainLayer = context.getBean("mainLayer",MainLayer.class);
        mainLayer.work();
    }
}
